name: Build and Push Docker Image

on:
  push:
    branches:
      - main
      - feature/exercise-template
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build from'
        required: false
        default: 'main'
      push:
        description: 'Push to registry'
        required: false
        default: 'true'
      rebuild-cache:
        description: 'Force rebuild builder cache for this run'
        required: false
        default: 'false'
      rebuild-deps-cache:
        description: 'Rebuild dependencies cache (triggers prewarm workflow)'
        required: false
        default: 'false'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKER_PROXY_URL: ${{ vars.DOCKER_PROXY_URL || secrets.DOCKER_PROXY_URL || 'http://81.71.93.183:10811' }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      HTTP_PROXY: ${{ env.DOCKER_PROXY_URL }}
      HTTPS_PROXY: ${{ env.DOCKER_PROXY_URL }}
      http_proxy: ${{ env.DOCKER_PROXY_URL }}
      https_proxy: ${{ env.DOCKER_PROXY_URL }}
      ALL_PROXY: ${{ env.DOCKER_PROXY_URL }}
      all_proxy: ${{ env.DOCKER_PROXY_URL }}
      NO_PROXY: localhost,127.0.0.1,::1
      no_proxy: localhost,127.0.0.1,::1
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Set up Python for Kokoro self-test
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: kokoro_local/requirements.txt

      - name: Install Kokoro self-test dependencies
        run: |
          echo "📦 Installing Kokoro self-test dependencies..."
          pip install pyyaml
          echo "✅ Dependencies installed"

      - name: Run Kokoro TTS self-test
        id: kokoro-selftest
        run: |
          echo "🧪 Running Kokoro TTS self-test..."
          python -m kokoro_local.selftest \
            --config kokoro_local/configs/default.yaml \
            --format json \
            --skip-on-missing-model \
            > kokoro-selftest-report.json || true

          echo "📄 Self-test report generated"
          cat kokoro-selftest-report.json

          # Extract status for summary
          if command -v jq &> /dev/null; then
            status=$(jq -r '.status' kokoro-selftest-report.json 2>/dev/null || echo "unknown")
          else
            status=$(grep -o '"status"[[:space:]]*:[[:space:]]*"[^"]*"' kokoro-selftest-report.json | head -1 | sed 's/.*"\([^"]*\)".*/\1/' || echo "unknown")
          fi

          echo "status=$status" >> $GITHUB_OUTPUT
          echo "✅ Kokoro self-test completed with status: $status"

      - name: Upload Kokoro self-test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: kokoro-selftest-report
          path: kokoro-selftest-report.json
          retention-days: 30

      - name: Add self-test results to summary
        if: always()
        run: |
          echo "## 🧪 Kokoro TTS Self-Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          status="${{ steps.kokoro-selftest.outputs.status }}"

          if [ "$status" = "success" ]; then
            echo "✅ **Status**: Success" >> $GITHUB_STEP_SUMMARY
          elif [ "$status" = "skipped" ]; then
            echo "⚠️ **Status**: Skipped (Model not found - expected in CI)" >> $GITHUB_STEP_SUMMARY
          elif [ "$status" = "error" ]; then
            echo "❌ **Status**: Error" >> $GITHUB_STEP_SUMMARY
          else
            echo "❓ **Status**: Unknown" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Report Details" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          cat kokoro-selftest-report.json >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Free up disk space on GitHub Actions runner
        run: |
          echo "🧹 Cleaning up GitHub Actions runner disk space..."
          
          # Remove large unnecessary packages
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/ghc
          sudo rm -rf /usr/local/share/boost
          sudo apt-get clean
          
          # Clean Docker images if any
          docker system prune -af --volumes || true
          
          # Remove large directories
          sudo rm -rf /usr/share/swift
          sudo rm -rf /usr/share/perl*
          sudo rm -rf /usr/share/python*
          sudo rm -rf /usr/share/man
          
          # Clean apt cache
          sudo apt-get autoremove -y
          sudo apt-get clean
          
          # Show available space
          echo "📊 Available disk space after cleanup:"
          df -h /
          
          echo "✅ Disk space cleanup completed"

      - name: Check available disk space before build
        run: |
          set -euo pipefail
          echo "📊 Disk usage overview:"
          df -h /
          df -h /home/runner/work

          available_kb=$(df --output=avail -k /home/runner/work | tail -n1 | tr -d ' ')
          min_required_kb=$((4 * 1024 * 1024))

          if [ "$available_kb" -lt "$min_required_kb" ]; then
            echo "::error::Available disk space is below 4GB (current: $((available_kb / 1024)) MB)."
            exit 1
          fi

          echo "✅ Available disk space is sufficient"

      - name: Set up Docker Buildx
        id: setup-buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_PAT }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}

      - name: Build and push Docker image using registry cache chain
        id: build-runtime
        shell: bash
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          LABELS: ${{ steps.meta.outputs.labels }}
          PUSH_ENABLED: ${{ github.event_name != 'pull_request' && (github.event.inputs.push != 'false') }}
          REBUILD_CACHE: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.rebuild-cache || 'false' }}
        run: |
          set -euo pipefail

          echo "$TAGS" > tags.txt
          echo "$LABELS" > labels.txt

          push_flag=(--load)
          if [ "$PUSH_ENABLED" = "true" ]; then
            push_flag=(--push)
          fi

          tag_args=()
          while IFS= read -r tag; do
            [ -z "$tag" ] && continue
            tag_args+=(--tag "$tag")
          done < tags.txt

          label_args=()
          while IFS= read -r label; do
            [ -z "$label" ] && continue
            label_args+=(--label "$label")
          done < labels.txt

          cache_from_args=(
            --cache-from "type=registry,ref=${REGISTRY}/${IMAGE_NAME}:cache-base"
            --cache-from "type=registry,ref=${REGISTRY}/${IMAGE_NAME}:cache-python"
            --cache-from "type=registry,ref=${REGISTRY}/${IMAGE_NAME}:cache-node"
          )

          if [ "$REBUILD_CACHE" = "true" ]; then
            echo "♻️  Rebuilding builder cache: skipping cache-builder layer reuse"
          else
            cache_from_args+=(
              --cache-from "type=registry,ref=${REGISTRY}/${IMAGE_NAME}:cache-builder"
            )
          fi

          cache_to_args=(
            --cache-to "type=registry,ref=${REGISTRY}/${IMAGE_NAME}:cache-builder,mode=max,compression=zstd"
          )

          build_args=(
            --builder "${{ steps.setup-buildx.outputs.name }}"
            --progress plain
            --file ./Dockerfile
            --target runtime
            --platform linux/amd64
            --build-arg BUILDKIT_INLINE_CACHE=1
            --build-arg CEREBRAS_API_KEY=placeholder_for_build
            --build-arg JWT_SECRET=placeholder_for_build
            --build-arg DATABASE_URL=file:./data/app.db
            "${push_flag[@]}"
          )

          build_args+=("${tag_args[@]}")
          build_args+=("${label_args[@]}")
          build_args+=("${cache_from_args[@]}")
          build_args+=("${cache_to_args[@]}")
          build_args+=(.)

          docker buildx build "${build_args[@]}" | tee build.log

      - name: Report cache hit statistics
        if: always()
        env:
          REBUILD_DEPS_CACHE: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.rebuild-deps-cache || 'false' }}
          REBUILD_CACHE: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.rebuild-cache || 'false' }}
        run: |
          echo "## 🎯 缓存命中情况" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"

          if [ -f build.log ]; then
            cached_layers=$(grep -c " CACHED " build.log || true)
            total_layers=$(grep -c " =>" build.log || true)
          else
            cached_layers=0
            total_layers=0
          fi

          echo "- **CACHED 行数**: ${cached_layers}" >> "$GITHUB_STEP_SUMMARY"
          echo "- **总阶段记录**: ${total_layers}" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"

          if [ "$REBUILD_CACHE" = "true" ]; then
            echo "- 本次构建跳过 \`cache-builder\` 读取以强制重建 builder 层" >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
          fi

          if [ "$REBUILD_DEPS_CACHE" = "true" ]; then
            {
              printf '%s\n' '> ⚠️ 本次请求包含 `rebuild-deps-cache=true`，请在本次构建后手动触发 `prewarm-deps.yml` workflow 以刷新 base/python/node 缓存层。'
              printf '\n'
            } >> "$GITHUB_STEP_SUMMARY"
          fi

          {
            printf '%s\n' '### 📌 下一步建议'
            printf '%s\n' '- 关注 BuildKit 日志中是否出现 "CACHED" 标记'
            printf '%s\n' '- 若缓存命中偏低，可先手动触发依赖预热工作流'
          } >> "$GITHUB_STEP_SUMMARY"
      
