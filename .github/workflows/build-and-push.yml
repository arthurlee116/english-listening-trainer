name: Build and Push Docker Image

on:
  push:
    branches:
      - main
      - feature/exercise-template
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build from'
        required: false
        default: 'main'
      push:
        description: 'Push to registry'
        required: false
        default: 'true'
      rebuild-cache:
        description: 'Force rebuild builder cache for this run'
        required: false
        default: 'false'
      rebuild-deps-cache:
        description: 'Rebuild dependencies cache (triggers prewarm workflow)'
        required: false
        default: 'false'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Set up Docker Buildx
        id: setup-buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_PAT }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}

      - name: Build and push Docker image using registry cache chain
        id: build-runtime
        shell: bash
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          LABELS: ${{ steps.meta.outputs.labels }}
          PUSH_ENABLED: ${{ github.event_name != 'pull_request' && (github.event.inputs.push != 'false') }}
          REBUILD_CACHE: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.rebuild-cache || 'false' }}
        run: |
          set -euo pipefail

          echo "$TAGS" > tags.txt
          echo "$LABELS" > labels.txt

          push_flag=(--load)
          if [ "$PUSH_ENABLED" = "true" ]; then
            push_flag=(--push)
          fi

          tag_args=()
          while IFS= read -r tag; do
            [ -z "$tag" ] && continue
            tag_args+=(--tag "$tag")
          done < tags.txt

          label_args=()
          while IFS= read -r label; do
            [ -z "$label" ] && continue
            label_args+=(--label "$label")
          done < labels.txt

          cache_from_args=(
            --cache-from "type=registry,ref=${REGISTRY}/${IMAGE_NAME}:cache-base"
            --cache-from "type=registry,ref=${REGISTRY}/${IMAGE_NAME}:cache-python"
            --cache-from "type=registry,ref=${REGISTRY}/${IMAGE_NAME}:cache-node"
          )

          if [ "$REBUILD_CACHE" = "true" ]; then
            echo "♻️  Rebuilding builder cache: skipping cache-builder layer reuse"
          else
            cache_from_args+=(
              --cache-from "type=registry,ref=${REGISTRY}/${IMAGE_NAME}:cache-builder"
            )
          fi

          cache_to_args=(
            --cache-to "type=registry,ref=${REGISTRY}/${IMAGE_NAME}:cache-builder,mode=max,compression=zstd"
          )

          build_args=(
            --builder "${{ steps.setup-buildx.outputs.name }}"
            --progress plain
            --file ./Dockerfile
            --target runtime
            --platform linux/amd64
            --build-arg BUILDKIT_INLINE_CACHE=1
            --build-arg CEREBRAS_API_KEY=placeholder_for_build
            --build-arg JWT_SECRET=placeholder_for_build
            --build-arg DATABASE_URL=file:./data/app.db
            "${push_flag[@]}"
          )

          build_args+=("${tag_args[@]}")
          build_args+=("${label_args[@]}")
          build_args+=("${cache_from_args[@]}")
          build_args+=("${cache_to_args[@]}")
          build_args+=(.)

          docker buildx build "${build_args[@]}" | tee build.log

      - name: Report cache hit statistics
        if: always()
        env:
          REBUILD_DEPS_CACHE: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.rebuild-deps-cache || 'false' }}
          REBUILD_CACHE: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.rebuild-cache || 'false' }}
        run: |
          echo "## 🎯 缓存命中情况" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"

          if [ -f build.log ]; then
            cached_layers=$(grep -c " CACHED " build.log || true)
            total_layers=$(grep -c " =>" build.log || true)
          else
            cached_layers=0
            total_layers=0
          fi

          echo "- **CACHED 行数**: ${cached_layers}" >> "$GITHUB_STEP_SUMMARY"
          echo "- **总阶段记录**: ${total_layers}" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"

          if [ "$REBUILD_CACHE" = "true" ]; then
            echo "- 本次构建跳过 \`cache-builder\` 读取以强制重建 builder 层" >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
          fi

          if [ "$REBUILD_DEPS_CACHE" = "true" ]; then
            {
              printf '%s\n' '> ⚠️ 本次请求包含 `rebuild-deps-cache=true`，请在本次构建后手动触发 `prewarm-deps.yml` workflow 以刷新 base/python/node 缓存层。'
              printf '\n'
            } >> "$GITHUB_STEP_SUMMARY"
          fi

          {
            printf '%s\n' '### 📌 下一步建议'
            printf '%s\n' '- 关注 BuildKit 日志中是否出现 "CACHED" 标记'
            printf '%s\n' '- 若缓存命中偏低，可先手动触发依赖预热工作流'
          } >> "$GITHUB_STEP_SUMMARY"
      
