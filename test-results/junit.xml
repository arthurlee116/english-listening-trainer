<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="34" failures="0" errors="0" time="0.377361834">
    <testsuite name="tests/unit/lib/storage.test.ts" timestamp="2025-10-01T14:57:22.169Z" hostname="192.168.2.9" tests="34" failures="0" errors="0" skipped="0" time="0.377361834">
        <testcase classname="tests/unit/lib/storage.test.ts" name="Storage Service &gt; Exercise History Storage &gt; saveToHistory &gt; should save exercise to history" time="0.003163416">
        </testcase>
        <testcase classname="tests/unit/lib/storage.test.ts" name="Storage Service &gt; Exercise History Storage &gt; saveToHistory &gt; should add new exercises to the beginning of history" time="0.000496208">
        </testcase>
        <testcase classname="tests/unit/lib/storage.test.ts" name="Storage Service &gt; Exercise History Storage &gt; saveToHistory &gt; should limit history to maximum 10 items" time="0.001395792">
        </testcase>
        <testcase classname="tests/unit/lib/storage.test.ts" name="Storage Service &gt; Exercise History Storage &gt; saveToHistory &gt; should handle localStorage errors gracefully" time="0.002698917">
        </testcase>
        <testcase classname="tests/unit/lib/storage.test.ts" name="Storage Service &gt; Exercise History Storage &gt; getHistory &gt; should return empty array when no history exists" time="0.00018175">
        </testcase>
        <testcase classname="tests/unit/lib/storage.test.ts" name="Storage Service &gt; Exercise History Storage &gt; getHistory &gt; should return stored history" time="0.000436292">
        </testcase>
        <testcase classname="tests/unit/lib/storage.test.ts" name="Storage Service &gt; Exercise History Storage &gt; getHistory &gt; should handle corrupted localStorage data gracefully" time="0.000439667">
        </testcase>
        <testcase classname="tests/unit/lib/storage.test.ts" name="Storage Service &gt; Exercise History Storage &gt; clearHistory &gt; should clear all history" time="0.000253291">
        </testcase>
        <testcase classname="tests/unit/lib/storage.test.ts" name="Storage Service &gt; Exercise History Storage &gt; clearHistory &gt; should handle localStorage errors gracefully" time="0.000317625">
        </testcase>
        <testcase classname="tests/unit/lib/storage.test.ts" name="Storage Service &gt; Progress Metrics Storage &gt; saveProgressMetrics &gt; should save progress metrics with retry mechanism" time="0.00042025">
        </testcase>
        <testcase classname="tests/unit/lib/storage.test.ts" name="Storage Service &gt; Progress Metrics Storage &gt; saveProgressMetrics &gt; should validate data integrity before saving" time="0.000563125">
        </testcase>
        <testcase classname="tests/unit/lib/storage.test.ts" name="Storage Service &gt; Progress Metrics Storage &gt; saveProgressMetrics &gt; should truncate weekly trend when data is too large" time="0.000279584">
        </testcase>
        <testcase classname="tests/unit/lib/storage.test.ts" name="Storage Service &gt; Progress Metrics Storage &gt; saveProgressMetrics &gt; should retry on storage failures" time="0.350152834">
        </testcase>
        <testcase classname="tests/unit/lib/storage.test.ts" name="Storage Service &gt; Progress Metrics Storage &gt; getProgressMetrics &gt; should return default metrics when no data exists" time="0.000286292">
        </testcase>
        <testcase classname="tests/unit/lib/storage.test.ts" name="Storage Service &gt; Progress Metrics Storage &gt; getProgressMetrics &gt; should validate and fix corrupted data" time="0.000448417">
        </testcase>
        <testcase classname="tests/unit/lib/storage.test.ts" name="Storage Service &gt; Progress Metrics Storage &gt; getProgressMetrics &gt; should handle JSON parsing errors gracefully" time="0.000295083">
        </testcase>
        <testcase classname="tests/unit/lib/storage.test.ts" name="Storage Service &gt; convertExerciseToSessionData &gt; should convert exercise with totalDurationSec" time="0.000358958">
        </testcase>
        <testcase classname="tests/unit/lib/storage.test.ts" name="Storage Service &gt; convertExerciseToSessionData &gt; should use fallback duration calculation when totalDurationSec is missing" time="0.000281959">
        </testcase>
        <testcase classname="tests/unit/lib/storage.test.ts" name="Storage Service &gt; convertExerciseToSessionData &gt; should use word-based estimation for unreasonable time differences" time="0.000258917">
        </testcase>
        <testcase classname="tests/unit/lib/storage.test.ts" name="Storage Service &gt; convertExerciseToSessionData &gt; should handle exercises with no results" time="0.000247833">
        </testcase>
        <testcase classname="tests/unit/lib/storage.test.ts" name="Storage Service &gt; Practice Notes Storage &gt; savePracticeNote &gt; should save practice note successfully" time="0.000437458">
        </testcase>
        <testcase classname="tests/unit/lib/storage.test.ts" name="Storage Service &gt; Practice Notes Storage &gt; savePracticeNote &gt; should update existing note" time="0.000267709">
        </testcase>
        <testcase classname="tests/unit/lib/storage.test.ts" name="Storage Service &gt; Practice Notes Storage &gt; savePracticeNote &gt; should enforce size limits" time="0.000343041">
        </testcase>
        <testcase classname="tests/unit/lib/storage.test.ts" name="Storage Service &gt; Practice Notes Storage &gt; savePracticeNote &gt; should limit number of notes to maximum" time="0.006533917">
        </testcase>
        <testcase classname="tests/unit/lib/storage.test.ts" name="Storage Service &gt; Practice Notes Storage &gt; savePracticeNote &gt; should handle storage errors gracefully" time="0.000483917">
        </testcase>
        <testcase classname="tests/unit/lib/storage.test.ts" name="Storage Service &gt; Practice Notes Storage &gt; savePracticeNote &gt; should handle non-string input" time="0.000206167">
        </testcase>
        <testcase classname="tests/unit/lib/storage.test.ts" name="Storage Service &gt; Practice Notes Storage &gt; getPracticeNote &gt; should return empty string for non-existent note" time="0.000128875">
        </testcase>
        <testcase classname="tests/unit/lib/storage.test.ts" name="Storage Service &gt; Practice Notes Storage &gt; getPracticeNote &gt; should return saved note" time="0.000167958">
        </testcase>
        <testcase classname="tests/unit/lib/storage.test.ts" name="Storage Service &gt; Practice Notes Storage &gt; getPracticeNote &gt; should handle storage errors gracefully" time="0.000382542">
        </testcase>
        <testcase classname="tests/unit/lib/storage.test.ts" name="Storage Service &gt; Practice Notes Storage &gt; deletePracticeNote &gt; should delete existing note" time="0.000474583">
        </testcase>
        <testcase classname="tests/unit/lib/storage.test.ts" name="Storage Service &gt; Practice Notes Storage &gt; deletePracticeNote &gt; should return false for non-existent note" time="0.000289333">
        </testcase>
        <testcase classname="tests/unit/lib/storage.test.ts" name="Storage Service &gt; Practice Notes Storage &gt; deletePracticeNote &gt; should handle storage errors gracefully" time="0.000427709">
        </testcase>
        <testcase classname="tests/unit/lib/storage.test.ts" name="Storage Service &gt; Storage Availability &gt; isStorageAvailable &gt; should return true when localStorage is available" time="0.000476917">
        </testcase>
        <testcase classname="tests/unit/lib/storage.test.ts" name="Storage Service &gt; Storage Availability &gt; isStorageAvailable &gt; should return false when localStorage throws error" time="0.000265">
        </testcase>
    </testsuite>
</testsuites>
